-- CATATAN : 
-- 1/ Pada file ini terdapat 2 query yaitu sales aging dan sales backdate
-- 2/ Block all code lalu click ALT + X untuk run query secara bersamaan

-- DASHBOARD #1 : SGF SALES AGING ONLY
SELECT DISTINCT
  -- BASIC DATA
  SSO.COMPANY_CODE || '-' || CP.COMPANY_NAME AS COMPANY,
  SSO.PLANT || '-' || CP.PLANT_NAME AS PLANT,
  SSO.CUSTOMER AS CUSTOMER_SO_CODE,
  CUST.CUSTOMER_NAME AS CUSTOMER_SO_NAME,
  SSO.DISTRIBUTION_CHANNEL || '-' || SA.DISTRIBUTION_CHANNEL_DESC AS DISTRIBUTION_CHANNEL,
  SSO.DIVISION || '-' || SSO.DIVISION_DESC AS DIVISION,
  DSR.REGION || '-' || DSR.REGION_DESC AS REGION,
  CASE 
	WHEN DSR.REGION IN ('01', '02', '03', '04', '05', '28') THEN 'PULAU JAWA'
    ELSE 'LUAR JAWA'
  END AS STATUS_REGION,
  -- TYPE
  FLOW.SALES_ORDER_TYPE || '-' || FLOW.SALES_ORDER_TYPE_DESC AS SALES_ORDER_TYPE,
  SB.BILLING_TYPE || '-' || SB.BILLING_TYPE_DESC AS BILLING_TYPE, 
  -- STATUS
  SSO.SALES_ORDER_STATUS_REJECTION || '-' || SSO.SALES_ORDER_STATUS_REJECTION_DESC AS SALES_ORDER_STATUS_REJECTION,
  -- DOC NUMBER
  SSO.CREATED_BY,
  FLOW.SALES_ORDER_NUMBER AS SO_NUMBER,
  FLOW.DELIVERY_NUMBER AS DO_NUMBER,
  FLOW.BILLING_NUMBER,
  SBC.BILLING_CLEARING_DOC,
  -- DATE TRANSACTION
  TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD') AS SO_CREATED_DATE,
  TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD') AS SO_DATE,
  TRY_TO_DATE(SD.DELIVERY_CREATED_DATE, 'YYYYMMDD') AS DO_CREATED_DATE,
  TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') AS DO_ACTUAL_DATE,
  TRY_TO_DATE(SB.BILLING_CREATED_DATE, 'YYYYMMDD') AS BILLING_CREATED_DATE,
  TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') AS BILLING_DATE,
  TRY_TO_DATE(SBC.BILLING_CLEAR_DATE, 'YYYYMMDD') AS BILLING_CLEAR_DATE,
  -- DATE SELISIH
	CASE 
	    WHEN TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD') IS NOT NULL 
	    THEN TO_VARCHAR(DATEDIFF(DAY, TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD'), TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD')))
	    WHEN TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') IS NULL AND TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD') IS NOT NULL 
	    THEN TO_VARCHAR(DATEDIFF(DAY, TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD'), CURRENT_DATE))
	    ELSE 'Unknown'
	END AS SELISIH_SO_DO,
	CASE 
	    WHEN TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') IS NOT NULL 
	    THEN TO_VARCHAR(DATEDIFF(DAY, TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD'), TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD')))
		WHEN TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') IS NULL AND TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') IS NOT NULL 
	    THEN TO_VARCHAR(DATEDIFF(DAY, TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD'), CURRENT_DATE))
	    ELSE 'Unknown'
	END AS SELISIH_DO_BILL,
	CASE 
	    WHEN TRY_TO_DATE(SBC.BILLING_CLEAR_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') IS NOT NULL 
	    THEN TO_VARCHAR(DATEDIFF(DAY, TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD'), TRY_TO_DATE(SBC.BILLING_CLEAR_DATE, 'YYYYMMDD')))
		WHEN TRY_TO_DATE(SBC.BILLING_CLEAR_DATE, 'YYYYMMDD') IS NULL AND TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') IS NOT NULL 
	    THEN TO_VARCHAR(DATEDIFF(DAY, TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD'), CURRENT_DATE))
	    ELSE 'Unknown'
	END AS SELISIH_BILL_BILLCLEARING,
	-- AGING : SELISIH
	CASE
	    WHEN SELISIH_SO_DO = 'Unknown' THEN 'Unknown'
	    WHEN SELISIH_SO_DO >= 0 AND SELISIH_SO_DO <= 3 THEN '1/ 0-3 Hari'
	    WHEN SELISIH_SO_DO > 3 AND SELISIH_SO_DO <= 7 THEN '2/ 3-7 Hari'
	    WHEN SELISIH_SO_DO > 7 AND SELISIH_SO_DO <= 14 THEN '3/ 7-14 Hari'
	    WHEN SELISIH_SO_DO > 14 AND SELISIH_SO_DO <= 30 THEN '4/ 14-30 Hari'
	    WHEN SELISIH_SO_DO > 30 THEN '5/ >30 Hari'
	    WHEN SELISIH_SO_DO < 0 AND SELISIH_SO_DO >= -3 THEN '1/ 0-3 Hari'
	    WHEN SELISIH_SO_DO < -3 AND SELISIH_SO_DO >= -7 THEN '2/ 3-7 Hari'
	    WHEN SELISIH_SO_DO < -7 AND SELISIH_SO_DO >= -14 THEN '3/ 7-14 Hari'
	    WHEN SELISIH_SO_DO < -14 AND SELISIH_SO_DO >= -30 THEN '4/ 14-30 Hari'
	    WHEN SELISIH_SO_DO < -30 THEN '5/ >30 Hari'
    	ELSE ''
	END AS AGING_SO_DO,
	CASE
	    WHEN SELISIH_DO_BILL = 'Unknown' THEN 'Unknown'
	    WHEN SELISIH_DO_BILL >= 0 AND SELISIH_DO_BILL <= 3 THEN '1/ 0-3 Hari'
	    WHEN SELISIH_DO_BILL > 3 AND SELISIH_DO_BILL <= 7 THEN '2/ 3-7 Hari'
	    WHEN SELISIH_DO_BILL > 7 AND SELISIH_DO_BILL <= 14 THEN '3/ 7-14 Hari'
	    WHEN SELISIH_DO_BILL > 14 AND SELISIH_DO_BILL <= 30 THEN '4/ 14-30 Hari'
	    WHEN SELISIH_DO_BILL > 30 THEN '5/ >30 Hari'
	    WHEN SELISIH_DO_BILL < 0 AND SELISIH_DO_BILL >= -3 THEN '1/ 0-3 Hari'
	    WHEN SELISIH_DO_BILL < -3 AND SELISIH_DO_BILL >= -7 THEN '2/ 3-7 Hari'
	    WHEN SELISIH_DO_BILL < -7 AND SELISIH_DO_BILL >= -14 THEN '3/ 7-14 Hari'
	    WHEN SELISIH_DO_BILL < -14 AND SELISIH_DO_BILL >= -30 THEN '4/ 14-30 Hari'
	    WHEN SELISIH_DO_BILL < -30 THEN '5/ >30 Hari'
    	ELSE ''
	END AGING_DO_BILL,
	CASE
	    WHEN SELISIH_BILL_BILLCLEARING = 'Unknown' THEN 'Unknown'
	    WHEN SELISIH_BILL_BILLCLEARING >= 0 AND SELISIH_BILL_BILLCLEARING <= 3 THEN '1/ 0-3 Hari'
	    WHEN SELISIH_BILL_BILLCLEARING > 3 AND SELISIH_BILL_BILLCLEARING <= 7 THEN '2/ 3-7 Hari'
	    WHEN SELISIH_BILL_BILLCLEARING > 7 AND SELISIH_BILL_BILLCLEARING <= 14 THEN '3/ 7-14 Hari'
	    WHEN SELISIH_BILL_BILLCLEARING > 14 AND SELISIH_BILL_BILLCLEARING <= 30 THEN '4/ 14-30 Hari'
	    WHEN SELISIH_BILL_BILLCLEARING > 30 THEN '5/ >30 Hari'
	    WHEN SELISIH_BILL_BILLCLEARING < 0 AND SELISIH_BILL_BILLCLEARING >= -3 THEN '1/ 0-3 Hari'
	    WHEN SELISIH_BILL_BILLCLEARING < -3 AND SELISIH_BILL_BILLCLEARING >= -7 THEN '2/ 3-7 Hari'
	    WHEN SELISIH_BILL_BILLCLEARING < -7 AND SELISIH_BILL_BILLCLEARING >= -14 THEN '3/ 7-14 Hari'
	    WHEN SELISIH_BILL_BILLCLEARING < -14 AND SELISIH_BILL_BILLCLEARING >= -30 THEN '4/ 14-30 Hari'
	    WHEN SELISIH_BILL_BILLCLEARING < -30 THEN '5/ >30 Hari'
	    ELSE ''
	END AGING_BILL_BILLCLEARING,
-- FROM AND WHERE
FROM PROD_DB.DSTR_BI_COMMUNITY.F_SALES_FLOW_ORDER_DOCUMENT_FLOW FLOW
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.F_SALES_SALES_ORDER SSO
    ON FLOW.SALES_ORDER_NUMBER = SSO.SALES_ORDER_NUMBER
	AND FLOW.SOURCE_SYSTEM = SSO.SOURCE_SYSTEM
	AND FLOW.SALES_ORDER_ITEM = SSO.SALES_ORDER_ITEM 
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.D_SALES_CUSTOMER CUST
    ON SSO.CUSTOMER = CUST.CUSTOMER
    AND SSO.SOURCE_SYSTEM = CUST.SOURCE_SYSTEM
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.D_SALES_CUSTOMER CUSTSH
    ON FLOW.CUSTOMER_SHIP_TO = CUSTSH.CUSTOMER
    AND FLOW.SOURCE_SYSTEM = CUSTSH.SOURCE_SYSTEM
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.F_SALES_DELIVERY SD
    ON FLOW.DELIVERY_NUMBER  = SD.DELIVERY_NUMBER  
    AND FLOW.SALES_ORDER_NUMBER = SD.REFERENCE_SALES_ORDER_NUMBER 
    AND FLOW.DELIVERY_ITEM = SD.DELIVERY_ITEM 
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.F_SALES_BILLING SB
    ON FLOW.BILLING_NUMBER = SB.BILLING_NUMBER
    AND FLOW.SALES_ORDER_NUMBER = SB.REFERENCE_SALES_ORDER_NUMBER 
    AND FLOW.BILLING_ITEM = SB.BILLING_ITEM 
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.F_SALES_BILLING_CLEARING SBC
    ON FLOW.BILLING_NUMBER = SBC.BILLING_NUMBER
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.D_SALES_AREA SA
    ON SSO.DISTRIBUTION_CHANNEL = SA.DISTRIBUTION_CHANNEL
    AND SSO.SOURCE_SYSTEM = SA.SOURCE_SYSTEM 
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.D_SALES_REGION DSR
    ON CUST.REGION = DSR.REGION
    AND CUST.SOURCE_SYSTEM = DSR.SOURCE_SYSTEM
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.D_SCM_COMPANY_AND_PLANT CP
    ON SSO.SOURCE_SYSTEM = CP.SOURCE_SYSTEM
    AND SSO.COMPANY_CODE = CP.COMPANY_CODE
    AND SSO.PLANT = CP.PLANT
WHERE NOT (
    -- Kondisi 1: billing NULL, tapi ada baris lain dengan billing NOT NULL untuk kombinasi SO & DO
    FLOW.BILLING_NUMBER IS NULL
    AND (FLOW.SALES_ORDER_NUMBER, FLOW.DELIVERY_NUMBER) IN (
        SELECT SALES_ORDER_NUMBER, DELIVERY_NUMBER
        FROM PROD_DB.DSTR_BI_COMMUNITY.F_SALES_FLOW_ORDER_DOCUMENT_FLOW
        WHERE BILLING_NUMBER IS NOT NULL)
    OR
    -- Kondisi 2: DO & BILL keduanya NULL, tapi ada baris lain untuk SO yang sama dengan DO dan BILL terisi
    (FLOW.DELIVERY_NUMBER IS NULL AND FLOW.BILLING_NUMBER IS NULL
        AND FLOW.SALES_ORDER_NUMBER IN (
            SELECT SALES_ORDER_NUMBER
            FROM PROD_DB.DSTR_BI_COMMUNITY.F_SALES_FLOW_ORDER_DOCUMENT_FLOW
            WHERE DELIVERY_NUMBER IS NOT NULL AND BILLING_NUMBER IS NOT NULL)))    
  AND FLOW.SOURCE_SYSTEM = 'PE1'
  AND SSO.COMPANY_CODE = 'ID90'
  AND TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD') BETWEEN '2025-05-01' AND '2025-07-31'
  AND DSR.COUNTRY = 'ID'
  GROUP BY ALL;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

-- DASHBOARD #1 : SGF SALES BACKDATE ONLY
SELECT DISTINCT
  -- BASIC DATA
  SSO.COMPANY_CODE || '-' || CP.COMPANY_NAME AS COMPANY,
  SSO.PLANT || '-' || CP.PLANT_NAME AS PLANT,
  SSO.CUSTOMER AS CUSTOMER_SO_CODE,
  CUST.CUSTOMER_NAME AS CUSTOMER_SO_NAME,
  SSO.DISTRIBUTION_CHANNEL || '-' || SA.DISTRIBUTION_CHANNEL_DESC AS DISTRIBUTION_CHANNEL,
  SSO.DIVISION || '-' || SSO.DIVISION_DESC AS DIVISION,
  DSR.REGION || '-' || DSR.REGION_DESC AS REGION,
  CASE 
	WHEN DSR.REGION IN ('01', '02', '03', '04', '05', '28') THEN 'PULAU JAWA'
    ELSE 'LUAR JAWA'
  END AS STATUS_REGION,
  -- TYPE
  FLOW.SALES_ORDER_TYPE || '-' || FLOW.SALES_ORDER_TYPE_DESC AS SALES_ORDER_TYPE,
  SB.BILLING_TYPE || '-' || SB.BILLING_TYPE_DESC AS BILLING_TYPE, 
  -- STATUS
  SSO.SALES_ORDER_STATUS_REJECTION || '-' || SSO.SALES_ORDER_STATUS_REJECTION_DESC AS SALES_ORDER_STATUS_REJECTION,
  -- DOC NUMBER
  SSO.CREATED_BY,
  FLOW.SALES_ORDER_NUMBER AS SO_NUMBER,
  FLOW.DELIVERY_NUMBER AS DO_NUMBER,
  FLOW.BILLING_NUMBER,
  SBC.BILLING_CLEARING_DOC,
  -- DATE TRANSACTION
  TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD') AS SO_CREATED_DATE,
  TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD') AS SO_DATE,
  TRY_TO_DATE(SD.DELIVERY_CREATED_DATE, 'YYYYMMDD') AS DO_CREATED_DATE,
  TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') AS DO_ACTUAL_DATE,
  TRY_TO_DATE(SB.BILLING_CREATED_DATE, 'YYYYMMDD') AS BILLING_CREATED_DATE,
  TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') AS BILLING_DATE,
  TRY_TO_DATE(SBC.BILLING_CLEAR_DATE, 'YYYYMMDD') AS BILLING_CLEAR_DATE,
	-- BACKDATE (Y/N)
	CASE 
	    WHEN TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD') IS NULL AND TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD') IS NULL THEN 'Unknown'
	    WHEN TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD') IS NULL THEN 'Real-time entry'
	    WHEN TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD') = TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD') THEN 'Real-time entry'
	    WHEN TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD') > TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD') THEN 'Forward-dated entry'
	    WHEN TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD') < TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD') THEN 'Backdated entry'
	    ELSE 'Backdated entry'
	END AS SO_BACKDATE,
	CASE  
	    WHEN TRY_TO_DATE(SD.DELIVERY_CREATED_DATE, 'YYYYMMDD') IS NULL AND TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') IS NULL THEN 'Unknown'
	    WHEN TRY_TO_DATE(SD.DELIVERY_CREATED_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') IS NULL THEN 'Real-time entry'
	    WHEN TRY_TO_DATE(SD.DELIVERY_CREATED_DATE, 'YYYYMMDD') = TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') THEN 'Real-time entry'
	    WHEN TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') > TRY_TO_DATE(SD.DELIVERY_CREATED_DATE, 'YYYYMMDD') THEN 'Forward-dated entry'
	    WHEN TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') < TRY_TO_DATE(SD.DELIVERY_CREATED_DATE, 'YYYYMMDD') THEN 'Backdated entry'
	    ELSE 'Backdated entry'
	END AS DO_BACKDATE,
	CASE 
	    WHEN TRY_TO_DATE(SB.BILLING_CREATED_DATE, 'YYYYMMDD') IS NULL AND TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') IS NULL THEN 'Unknown'
	    WHEN TRY_TO_DATE(SB.BILLING_CREATED_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') IS NULL THEN 'Real-time entry'
	    WHEN TRY_TO_DATE(SB.BILLING_CREATED_DATE, 'YYYYMMDD') = TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') THEN 'Real-time entry'
	    WHEN TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') > TRY_TO_DATE(SB.BILLING_CREATED_DATE, 'YYYYMMDD') THEN 'Forward-dated entry'
	    WHEN TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') < TRY_TO_DATE(SB.BILLING_CREATED_DATE, 'YYYYMMDD') THEN 'Backdated entry'
	    ELSE 'Backdated entry'
	END AS BILL_BACKDATE,
	-- BACKDATE CREATED DATE - DOC DATE
	CASE 
	    WHEN TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD') IS NOT NULL 
	    THEN TO_VARCHAR(DATEDIFF(DAY, TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD'), TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD')))
		WHEN TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SSO.SALES_ORDER_DATE, 'YYYYMMDD') IS NULL 
	    THEN '0'
	    ELSE 'Unknown'
	END AS SO_DIFF_DAYS,
	CASE 
	    WHEN TRY_TO_DATE(SD.DELIVERY_CREATED_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') IS NOT NULL 
	    THEN TO_VARCHAR(DATEDIFF(DAY, TRY_TO_DATE(SD.DELIVERY_CREATED_DATE, 'YYYYMMDD'), TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD')))
		WHEN TRY_TO_DATE(SD.DELIVERY_CREATED_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SD.DELIVERY_ACTUAL_DATE, 'YYYYMMDD') IS NULL 
	    THEN '0'
	    ELSE 'Unknown'
	END AS DO_DIFF_DAYS,
	CASE 
	    WHEN TRY_TO_DATE(SB.BILLING_CREATED_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') IS NOT NULL 
	    THEN TO_VARCHAR(DATEDIFF(DAY, TRY_TO_DATE(SB.BILLING_CREATED_DATE, 'YYYYMMDD'), TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD')))
		WHEN TRY_TO_DATE(SB.BILLING_CREATED_DATE, 'YYYYMMDD') IS NOT NULL AND TRY_TO_DATE(SB.BILLING_DATE, 'YYYYMMDD') IS NULL 
	    THEN '0'
	    ELSE 'Unknown'
	END AS BILL_DIFF_DAYS,
	-- AGING : SELISIH
	CASE
	    WHEN SO_DIFF_DAYS = 'Unknown' THEN 'Unknown'
	    WHEN SO_DIFF_DAYS >= 0 AND SO_DIFF_DAYS <= 3 THEN '1/ 0-3 Hari'
	    WHEN SO_DIFF_DAYS > 3 AND SO_DIFF_DAYS <= 7 THEN '2/ 3-7 Hari'
	    WHEN SO_DIFF_DAYS > 7 AND SO_DIFF_DAYS <= 14 THEN '3/ 7-14 Hari'
	    WHEN SO_DIFF_DAYS > 14 AND SO_DIFF_DAYS <= 30 THEN '4/ 14-30 Hari'
	    WHEN SO_DIFF_DAYS > 30 THEN '5/ >30 Hari'
	    WHEN SO_DIFF_DAYS < 0 AND SO_DIFF_DAYS >= -3 THEN '1/ 0-3 Hari'
	    WHEN SO_DIFF_DAYS < -3 AND SO_DIFF_DAYS >= -7 THEN '2/ 3-7 Hari'
	    WHEN SO_DIFF_DAYS < -7 AND SO_DIFF_DAYS >= -14 THEN '3/ 7-14 Hari'
	    WHEN SO_DIFF_DAYS < -14 AND SO_DIFF_DAYS >= -30 THEN '4/ 14-30 Hari'
	    WHEN SO_DIFF_DAYS < -30 THEN '5/ >30 Hari'
	    ELSE ''
	END AGING_SO_DIFF_DAYS,
	CASE
	    WHEN DO_DIFF_DAYS = 'Unknown' THEN 'Unknown'
	    WHEN DO_DIFF_DAYS >= 0 AND DO_DIFF_DAYS <= 3 THEN '1/ 0-3 Hari'
	    WHEN DO_DIFF_DAYS > 3 AND DO_DIFF_DAYS <= 7 THEN '2/ 3-7 Hari'
	    WHEN DO_DIFF_DAYS > 7 AND DO_DIFF_DAYS <= 14 THEN '3/ 7-14 Hari'
	    WHEN DO_DIFF_DAYS > 14 AND DO_DIFF_DAYS <= 30 THEN '4/ 14-30 Hari'
	    WHEN DO_DIFF_DAYS > 30 THEN '5/ >30 Hari'
	    WHEN DO_DIFF_DAYS < 0 AND DO_DIFF_DAYS >= -3 THEN '1/ 0-3 Hari'
	    WHEN DO_DIFF_DAYS < -3 AND DO_DIFF_DAYS >= -7 THEN '2/ 3-7 Hari'
	    WHEN DO_DIFF_DAYS < -7 AND DO_DIFF_DAYS >= -14 THEN '3/ 7-14 Hari'
	    WHEN DO_DIFF_DAYS < -14 AND DO_DIFF_DAYS >= -30 THEN '4/ 14-30 Hari'
	    WHEN DO_DIFF_DAYS < -30 THEN '5/ >30 Hari'
	    ELSE ''
	END AGING_DO_DIFF_DAYS,
	CASE
	    WHEN BILL_DIFF_DAYS = 'Unknown' THEN 'Unknown'
	    WHEN BILL_DIFF_DAYS >= 0 AND BILL_DIFF_DAYS <= 3 THEN '1/ 0-3 Hari'
	    WHEN BILL_DIFF_DAYS > 3 AND BILL_DIFF_DAYS <= 7 THEN '2/ 3-7 Hari'
	    WHEN BILL_DIFF_DAYS > 7 AND BILL_DIFF_DAYS <= 14 THEN '3/ 7-14 Hari'
	    WHEN BILL_DIFF_DAYS > 14 AND BILL_DIFF_DAYS <= 30 THEN '4/ 14-30 Hari'
	    WHEN BILL_DIFF_DAYS > 30 THEN '5/ >30 Hari'
	    WHEN BILL_DIFF_DAYS < 0 AND BILL_DIFF_DAYS >= -3 THEN '1/ 0-3 Hari'
	    WHEN BILL_DIFF_DAYS < -3 AND BILL_DIFF_DAYS >= -7 THEN '2/ 3-7 Hari'
	    WHEN BILL_DIFF_DAYS < -7 AND BILL_DIFF_DAYS >= -14 THEN '3/ 7-14 Hari'
	    WHEN BILL_DIFF_DAYS < -14 AND BILL_DIFF_DAYS >= -30 THEN '4/ 14-30 Hari'
	    WHEN BILL_DIFF_DAYS < -30 THEN '5/ >30 Hari'
	    ELSE ''
	END AGING_BILL_DIFF_DAYS
-- FROM AND WHERE
FROM PROD_DB.DSTR_BI_COMMUNITY.F_SALES_FLOW_ORDER_DOCUMENT_FLOW FLOW
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.F_SALES_SALES_ORDER SSO
    ON FLOW.SALES_ORDER_NUMBER = SSO.SALES_ORDER_NUMBER
	AND FLOW.SOURCE_SYSTEM = SSO.SOURCE_SYSTEM
	AND FLOW.SALES_ORDER_ITEM = SSO.SALES_ORDER_ITEM 
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.D_SALES_CUSTOMER CUST
    ON SSO.CUSTOMER = CUST.CUSTOMER
    AND SSO.SOURCE_SYSTEM = CUST.SOURCE_SYSTEM
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.D_SALES_CUSTOMER CUSTSH
    ON FLOW.CUSTOMER_SHIP_TO = CUSTSH.CUSTOMER
    AND FLOW.SOURCE_SYSTEM = CUSTSH.SOURCE_SYSTEM
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.F_SALES_DELIVERY SD
    ON FLOW.DELIVERY_NUMBER  = SD.DELIVERY_NUMBER  
    AND FLOW.SALES_ORDER_NUMBER = SD.REFERENCE_SALES_ORDER_NUMBER 
    AND FLOW.DELIVERY_ITEM = SD.DELIVERY_ITEM 
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.F_SALES_BILLING SB
    ON FLOW.BILLING_NUMBER = SB.BILLING_NUMBER
    AND FLOW.SALES_ORDER_NUMBER = SB.REFERENCE_SALES_ORDER_NUMBER 
    AND FLOW.BILLING_ITEM = SB.BILLING_ITEM 
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.F_SALES_BILLING_CLEARING SBC
    ON FLOW.BILLING_NUMBER = SBC.BILLING_NUMBER
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.D_SALES_AREA SA
    ON SSO.DISTRIBUTION_CHANNEL = SA.DISTRIBUTION_CHANNEL
    AND SSO.SOURCE_SYSTEM = SA.SOURCE_SYSTEM 
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.D_SALES_REGION DSR
    ON CUST.REGION = DSR.REGION
    AND CUST.SOURCE_SYSTEM = DSR.SOURCE_SYSTEM
  LEFT JOIN PROD_DB.DSTR_BI_COMMUNITY.D_SCM_COMPANY_AND_PLANT CP
    ON SSO.SOURCE_SYSTEM = CP.SOURCE_SYSTEM
    AND SSO.COMPANY_CODE = CP.COMPANY_CODE
    AND SSO.PLANT = CP.PLANT
WHERE NOT (
    -- Kondisi 1: billing NULL, tapi ada baris lain dengan billing NOT NULL untuk kombinasi SO & DO
    FLOW.BILLING_NUMBER IS NULL
    AND (FLOW.SALES_ORDER_NUMBER, FLOW.DELIVERY_NUMBER) IN (
        SELECT SALES_ORDER_NUMBER, DELIVERY_NUMBER
        FROM PROD_DB.DSTR_BI_COMMUNITY.F_SALES_FLOW_ORDER_DOCUMENT_FLOW
        WHERE BILLING_NUMBER IS NOT NULL)
    OR
    -- Kondisi 2: DO & BILL keduanya NULL, tapi ada baris lain untuk SO yang sama dengan DO dan BILL terisi
    (FLOW.DELIVERY_NUMBER IS NULL AND FLOW.BILLING_NUMBER IS NULL
        AND FLOW.SALES_ORDER_NUMBER IN (
            SELECT SALES_ORDER_NUMBER
            FROM PROD_DB.DSTR_BI_COMMUNITY.F_SALES_FLOW_ORDER_DOCUMENT_FLOW
            WHERE DELIVERY_NUMBER IS NOT NULL AND BILLING_NUMBER IS NOT NULL)))    
  AND FLOW.SOURCE_SYSTEM = 'PE1'
  AND SSO.COMPANY_CODE = 'ID90'
  AND TRY_TO_DATE(SSO.SALES_ORDER_CREATED_DATE, 'YYYYMMDD') BETWEEN '2025-05-01' AND '2025-07-31'
  AND DSR.COUNTRY = 'ID'
  GROUP BY ALL;
